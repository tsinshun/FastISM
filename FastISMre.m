function R = FastISMre3(I0,FWHM)
% Imstack = read_tiff('D:\ISMdata\640_reference_251_M1_1_M2_3_44cycles_4pulse_MMStack_Pos0.ome.tif',1);
% I0 = Imstack(:,:,1);
Direct ='F:\GWDG\ISM\data\640_reference_251_M1_1_M2_3_46cycles_4pulse'; 
fn = '640_reference_251_M1_1_M2_3_46cycles_4pulse_MMStack_Pos0.ome.tif';
Gn = read_tiff([Direct '\' fn],1);
%%
%% simulatiion
N = 512;
Bg = 200.0;
I0 = zeros(N,N);
I0(15:20:end,15:20:end) = 1;
Nspot = sum(I0(:));
A=randi(0+[100 300],1,Nspot); %A = ones(1,Nspot)*200;
Id = I0==1;
I0(Id)=A(:); %I0(Id)=100;.
Sig = 2;
PSF = fspecial('gaussian', N, Sig);
PSF = mat2gray(PSF);
Z0 = conv2(I0,PSF,'same');
Gn= poissrnd(Z0+Bg);
Gn= imnoise(uint16(Z0+Bg),'poisson'); Gn = double(Gn); 
% Gn = imrotate(Gn,45,'bicubic','crop'); 
% Gn = Gn(N/4+1:end-N/4,N/4+1:end-N/4);
imagesc(Gn);colormap hot; axis image;axis off
% G = Imstack(:,:,1);
Iraw = double(Gn); 
% imwrite(uint16(Gn),'F:\GWDG\thesis\GaussFitting\SP\Gn_bg200.tif');
% I = cdata(41:end,4:end-1,:);  imagesc(rgb2gray(I));axis image;colorbar;axis off
%%
% Nr = floor(2.0*Sig*2.3548/2);
% k = 0; SNR = [];
% for m=1:N
%    for n=1:N
%       if Id(m,n)
%          Tn = Gn(m-Nr:m+Nr,n-Nr:n+Nr); 
%          T0 = Z(m-Nr:m+Nr,n-Nr:n+Nr)+Bg;
%          Noise=Tn-T0;
%          PS = var(T0(:)); PN = var((Noise(:)));
%          k = k+1;
% %          SNR(k) = 10*log10(PS/PN);
%          SNR(k) = snr(T0(:),Noise(:));
%       end
%    end
% end
% mean(SNR)
%%
Iref = Gn;
tic
[Fn,X,Y] = LocalizeSpots(double(Iref));
toc
% imwrite(uint16(Gn),'F:\GWDG\thesis\ISMRe\RapidSTORMtest\Gn_bg30.tif');
%%
Path = 'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\blue_1';  
Fname = 'blue_1_MMStack_Pos0.ome.tif';  
% Path = 'F:\GWDG\ISM\data\100x_640_reference_251_M1_1_M2_3_46cycles_4pulse_7us';
% Fname = '100x_640_reference_251_M1_1_M2_3_46cycles_4pulse_7us_MMStack_Pos0.ome.tif';
Path = 'F:\GWDG\thesis\ISMRe\vero';  
Fname = 'ref405_Chroma_50c_250im_4p_42d_1_MMStack_Pos0.ome.tif';  
Fname = 'vero_473_250im_4p_10c_42d_1_MMStack_Pos0.ome.tif';  
absPath = strcat(Path,'\',Fname);

absPath = strcat('F:\ISM\IHCs','\','Combined.tif');
absPath = strcat('F:\GWDG\ISM\data\170425 cells\reference_1','\','reference_1_MMStack_Pos0.ome.tif');
Reff = read_tiff(absPath,1);
Iraw = double(Reff); 
imagesc(mean(Iraw,3))
%%
Iref = Reff; 
% Iraw = Reff(:,:,162);
tic
[Fn,X,Y] = LocalizeSpots(G); % double(Iref(:,:,1:end))
toc
%%
Path = 'F:\GWDG\ISM\data\640_reference_251_M1_1_M2_3_46cycles_4pulse';
fileName = '640_reference_251_M1_1_M2_3_46cycles_4pulse_MMStack_Pos0.ome.txt';
% fileName = '640_reference_251_M1_1_M2_3_44cycles_4pulse_MMStack_Pos0.ome.Localiz.txt';
% Path = 'F:\GWDG\ISM\data\100x_640_reference_251_M1_1_M2_3_46cycles_4pulse_7us';
% fileName = '100x_640_reference_251_M1_1_M2_3_46cycles_4pulse_7us_MMStack_Pos0.ome.txt';


% Path = 'F:\GWDG\ISM\data\vero_473_250im_4p_30c_42d_1';
% fileName = 'ref405_Chroma_50c_250im_4p_42d_1_MMStack_Pos0.ome.txt';
Path = 'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\combined';
fileName = 'Combined_MMStack_Pos0.ome.txt';


%%
% Dat = importdata([Path '\' fileName]);
% Dat = importdata( 'F:\GWDG\thesis\ISMRe\RapidSTORMtest\Gn_bg30.txt'); 
Dat = importdata( 'F:\ISM\IHCs\Combined.txt');
P = Dat.data;
% Fn1 = P(:,3);       % for txt generated by our software
Fn1 = P(:,3) + 1; % for txt by RapidSTORM
X1 = P(:,1)/100;    % don't forget divided by the pixel-size set in the localization software
Y1 = P(:,2)/100;
%%
Path = 'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\blue_1';  
fileName = 'ISM_Ref_xy.txt'; % using maximum as position seems very nice
Path = 'F:\GWDG\thesis\ISMRe\vero';   
fileName = 'ref405_Chroma_50c_250im_4p_42d_1_MMStack_Pos0.ome.txt';

Path = 'F:\ISM\vero\ForTest';   
fileName = 'ref405_Chroma_50c_250im_4p_42d_1_MMStack_Pos0.ome.txt';
fileName1 = 'vero_473_250im_4p_10c_42d_1_MMStack_Pos0.ome.tif';
%%
Dat = importdata([Path '\' fileName]);
P = Dat.data;
Fn1 = P(:,3)+1; % for txt by RapidSTORM
X1 = P(:,1)/100;    % don't forget divided by the pixel-size set in the localization software
Y1 = P(:,2)/100;
%%

Z = getISMscannedImage([256 256]*2,X1,Y1,2.09/sqrt(2),1);
Nz = 10;imagesc(Z(Nz+1:end-Nz,Nz+1:end-Nz));axis image
%%
Reff = read_tiff([Path '\' fileName1],1);
Iraw = double(Reff); 
%% inperpolation choice is also important, use lanczos2 is better than bilinear

tic
[Iism4,~] = getISM(Iraw, Fn1, X1, Y1, 2, 11, 100);
toc
Np = 10;
figure;imagesc(Iism4(Np+1:end-Np,Np+1:end-Np)); axis image; colormap gray
%  imwrite(uint16(Iism4),'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\combined\FastRecon_lanczos2_ISM_Ref_xy.tif');
%%
[Iism3,~] = getISM(Iraw, Fn, X, Y, 1, 11, 100);
Np = 10;
imagesc(Iism3(Np+1:end-Np,Np+1:end-Np)); axis image; colormap hot
% Tplot({Z0 Gn Iism4 Iism3},2,2)
%%
tic
[Iism6,Ipat] = getISM(Iraw, Fn1, X1, Y1, 1, 9, 100);
toc
subplot(121);
imagesc(Iism6);  axis image;colormap gray;
subplot(122); imagesc(sum(Iism3,3));  colormap gray; axis image
% imwrite(uint16(mat2gray(Iism6)*(2^16-1)),'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\combined\ISM.tif');
%%
Tplot({Iism1 Iism2 Iism4 Iism6},2,2)
Tplot({Iism1 Z1 Iism1-Z1 F},2,2)
%%
Path = 'F:\GWDG\ISM\data\IHCs_p14_calretinin488_Vglut568_Otof647\blue_1';  
Fname = 'blue_1_MMStack_Pos0.ome';  

absPath = strcat(Path,'\',Fname);
Iraw = read_tiff(absPath,1);

%%
[Iism,Ipat] = getISM(Iraw, Fn1, X1, Y1, 6, 9, 100);
% Id = Ipat<1e-1;
% Ipat1 = Ipat;
% Ipat1(Id)=1;
% If = Iism./Ipat1;
imagesc(Iism);  colormap gray;  axis image
%imwrite(uint16(mat2gray(Iism)*(2^16-1)),'D:\TSIN-W10\ISM\640_reference_251_M1_1_M2_3_44cycles_4pulse\ISM.png','BitDepth',16);
%%
PSF = fspecial('gaussian', 9, 1.09);
imagesc(deconvreg(Iism,PSF));
%%
Lz = size(Iraw,3);
Bg = zeros(1,Lz);
for i=1:Lz
    Frame = (Iraw(:,:,i)); 
    
    [Cout,Cent] = hist(Frame(:),2^16-1);
%     bar(Cent,Cout)
    [~,Id] = max(Cout);
    Bg(i) = Cent(Id);
end
plot(Bg);
%%
Nscale = 16;
P1 = fspecial( 'gaussian',size(Ipat),Nscale*1.09); P1 = P1/max(P1(:)); P1(P1<0.001)=0;
F1 = fftshift(fft2(P1));
P2 = fspecial( 'gaussian',size(Ipat),Nscale*1.09/sqrt(1)); P2 = P2/max(P2(:)); P2(P2<0.001)=0;
F2 = fftshift(fft2(P2));
%%
% Nscale = 2;
X2 = round((X1+0.5)*Nscale); Y2 = round((Y1+0.5)*Nscale);
Ipat = zeros(256*Nscale,256*Nscale); Ipat1 = Ipat;
for i=1:length(X2)       
    Ipat(Y2(i),X2(i)) = Ipat(Y2(i),X2(i)) + 1;
end

Np1 = 11;
Ipat1(Np1+1:end-Np1,Np1+1:end-Np1) = Ipat(Np1+1:end-Np1,Np1+1:end-Np1);

% for i=2:256*Nscale
%     for j=2:256*Nscale
%         if mod(j,8)==0 && mod(i,12)==0
%            Ipat(i,j)=1; 
%         end
%     end
% end
%%
Np = 16; 
Ipat(1:Np,:) = 0;  Ipat(end-Np+1:end,:) = 0; 
Ipat(:,1:Np) = 0;  Ipat(:,end-Np+1:end) = 0; 
Fpat = fftshift(fft2(Ipat));
Ires = real(fftshift(ifft2(ifftshift(F2.*Fpat))));
figure;imagesc(1:256,1:256,Ires(Np+1:end-Np,Np+1:end-Np)); colormap gray
% imagesc(log(1+abs(F2.*Fpat)));

%% scatter plot
sz = 1;
scatter(X,Y,sz,...
              'MarkerFaceColor','red',...
              'LineWidth',1.5);
hold on;

scatter(X1+0.5,Y1+0.5,sz,'MarkerEdgeColor',[0 0 .5],...
              'MarkerFaceColor',[1 0 0],...
              'LineWidth',1.5);
hold off; axis image
%%
Nscale = 16;

m1 = round(150); n1 = round(137);
m2 = round(170); n2 = round(158);
X3 = X1; Y3=Y1;
Id1 = X1<n1 | X1>n2;
Id2 = Y1<m1 | Y1>m2;
X3(Id1 | Id2)=[];
Y3(Id1 | Id2)=[];
% X3 = X3 - n1; Y3 = Y3-m1;
subplot(122);
imagesc((n1:n2)-n1,(m1:m2)-m1,Ires(m1*Nscale:m2*Nscale,n1*Nscale:n2*Nscale)); axis image
subplot(121);
scatter(X3+0.5-n1,-(Y3+0.5)+m1,sz,'MarkerEdgeColor',[0 0 .5],...
              'MarkerFaceColor',[1 0 0],...
              'LineWidth',1.5);
axis image
% axis( [xmin xmax ymin ymax] 
%%
G=Gn-70;
[Cout,Cent] = hist(Gn(:));
bar(Cent,Cout)
[~,Id] = max(Cout);
bg = Cent(Id);
G = Gn-bg;
G(G<0)=0;
%%
[Sigma,Bg] = FWHMestimat(G)
Bg= Bg + bg;
%%
PSF = fspecial('gaussian', 19, 3);
% PSF = PSF./max(PSF);
tic
[xc, yc, peaks] = getposition(G,PSF); 
toc
%%
tic
[M,N] = size(G);
Npd = 10;
Im= padarray(G,[Npd Npd]); 
% if(mode(M,2)==1)
% end
[M,N] = size(Im); FWHM = 3;
Mb=(M-1)/2;
Nb=(N-1)/2;
[x,y] = meshgrid(-Nb:Nb,-Mb:Mb);
sig = FWHM/(2*sqrt(2*log(2))); sig = 4;
PSF = exp(-(x.^2+y.^2)/(2*sig^2)); % PSF=PSF-mean(PSF(:));
thr=0.01; 
W = PSF>thr;
PSF = PSF.*W; 
c = 1/sqrt(sum(PSF(:).^2));
R1 = convfft(Im,PSF);
R2 = convfft(Im.^2,W);
R2(R2<0)=0;
R = c*R1./sqrt(R2);
R(isnan(R))=0;
R = R(Npd+1:end-Npd,Npd+1:end-Npd);
Mask = (R>0.72);
imagesc(R.*Mask)

[~,PX] = findpeak(R.*Mask, FWHM);
toc
%%
OTF = fftshift(fft2(PSF));
FI = fftshift(fft2(Im));
A1 = abs(OTF);
A2 = abs(FI); % imagesc(log(1+A2))
F1 = OTF./A1; % sum(isnan(A2(:)))
F2 = FI./A2;
FC = F2.*conj(F1);

F3 = FI.*conj(OTF);
FC = F3./abs(F3); % sum(isnan(abs(F3(:))))
Id = isnan(abs(FC));
FC(Id) = 1E-50;
C = abs(fftshift(ifft2(ifftshift(FC))));
imagesc(C)

% B = imrotate(PX,45,'bilinear','crop'); B(B>0)=1;
%%
Tplot({R.*Mask B(257:(END-256),257:(END-256))},1,2)
color = {'red','white','green','magenta'};
GB = insertMarker(G,find(PX>=1),'x','color',color,'size',10);
figure; imagesc(conv2(PX,PSF,'same'));
function R = convfft(f,H)
FF=fft2(f).*conj(fft2(H));
R = real(fftshift(ifftn(FF)));


function y = findpeak0(x, FW)
[m, n] = size(x);
y = zeros(m,n);

Nw = FW; % search distance
Npad = Nw;
x = padarray(x,[Npad Npad]);
% [M, N] = size(x);
for i = Npad+1:m+Npad
    for j = Npad+1:n+Npad        
        if(x(i,j)>0 &&  x(i,j)>=x(i-1,j) && x(i,j)>=x(i+1,j) && x(i,j)>=x(i,j-1) && x(i,j)>=x(i,j+1) && x(i,j)>=x(i-1,j-1) && x(i,j)>=x(i+1,j-1) && x(i,j)>=x(i-1,j+1) && x(i,j)>=x(i+1,j+1))
            y(i-Npad,j-Npad) = 1; 

%             W = x(i-Nw:i+Nw,j-Nw:j+Nw);
%             [~, I] = max(W(:));
%             [u,v] = ind2sub(size(W),I);
%             u1 = i+u-(Nw+1);
%             v1 = j+v-(Nw+1);
%             if u1-Npad> m || v1-Npad>n
%                continue; 
%             end
%             y(u1-Npad,v1-Npad) = 1;
        end
    
    end
end
y1 = y;


function [PSF,OTF,W,Fw,c]=getPSF(siz, FWHM)
M = siz(1); N=siz(2);
[x,y] = meshgrid(1:N,1:M);
x = x-(N+1)/2; y=y-(M+1)/2;
sig = FWHM/(2*sqrt(2*log(2))); %sig = 4;
PSF = exp(-(x.^2+y.^2)/(2*sig^2)); % PSF=PSF-mean(PSF(:));
thr=0.01; 
% W = PSF>thr;
W = abs(x)<=round(FWHM*1.2+1) & abs(y)<=round(FWHM*1.2+1); % it turns out that square window is much better
PSF = PSF.*W; 
c = sqrt(sum(PSF(:).^2));
OTF = fftshift(fft2(PSF));% imagesc(log(abs(fft2(PSF,M1,N1)-OTF)))
Fw = fftshift(fft2(W));

function P = getPosition(Gn,Pk,FWHM,Bg)
[M,N]=size(Gn);
Nr = round(FWHM)+1;
Id = Pk>0;


P = zeros(100000,5);
k = 1;
for i=1:M
    for j=1:N
        m1=i-Nr; m2=i+Nr;
        n1=j-Nr; n2=j+Nr;
        if m1>1&&m2<=M &&n1>1&&n2<=N && Pk(i,j)>0

            zn=Gn(m1:m2,n1:n2);
            [x,y] = meshgrid(n1:n2,m1:m2);
            x = x - 0.5;
            y = y - 0.5;
%                 p0 = guofitting(zn,x,y);                
%                 p1 = [p0 0];

           % estimate amplitude
            A1 = imresize(zn,size(zn)+1);
%             A1 = medfilt2(A1,[3 3]);
            A2 = max(A1(:));
            A3 = A2-Bg;
            if A3<=0
               A3 = A2; 
            end
            
            p1 = [A3 j i FWHM/2.358 Bg];

%                 fy = guassfit2d(zn,x,y,p1);        
%                 p3 = [fy.A fy.a, fy.b fy.sig fy.c];

%                 p3 = guassfit_LM(p1, x, y, zn, 100); %p3
%                 p3 = guassfit_ML(p1, x, y, zn, 100);
%                 phb = Guassfit_Hyb(zn,x,y); p3 = phb;
%                 p3 = p2;

                Bg1 = Bg;
                if k>10
                    Bg1 = mean(P(k-10:k-1,5));
                end
                p4 = Guassfit_Hyb1(zn,x,y,Bg1); p3 = p4;
                
                if k==1370 
                   1;
                end
                if p3(2)<0 || p3(3)<0 || p3(2)>N || p3(3)>M
%                     p3
                end
           
            
            P(k,:) = p3; 
            k=k+1;
        end
    end        
end
if k>1
    P = P(1:k-1,:);
end


    
function [Sigma,Bg] = FWHMestimat(Img)
Sigma=2; Bg=0;
Wid = 0;
%  estimate Bg
Gn = Img;
[Cout,Cent] = hist(Gn(:),max(Gn(:)));
[~,Id] = max(Cout);
bg = Cent(Id);
for i=1:1
    G = Gn-bg;
    Id = G<0;
    if sum(Id(:))>100
        bg = bg + mean(G(Id));  % mean(G(Id))
    end
end

% I = medfilt2(Img,[3 3]);
I = Img;
[M,N] = size(I);
C = zeros(1,100);
F = zeros(1,100);
k = 1;
for FWHM = 2:2:100
    [PSF,OTF,W,Fw,c]=getPSF([M N], FWHM);
%     R = Correlate(I,Fw,OTF,c);
    R = Correlate2(I,W,Fw,PSF,OTF);
    
    Id = R>(max(R(:))/2);
%     R(Id) = 0;
    Pk = findpeak(R, FWHM,0.5);
    C(k) = mean(R(Id));
    F(k) = FWHM;
    if k>1 && C(k)<C(k-1)
        Wid = F(k-1);
       break; 
    end
    k = k + 1;
end

if Wid>0
    Id = Pk>0;
    R1 = Pk(Id);
    [B,~] = sort(R1,'descend');
    Len = min(length(B),100); % get the top 100 light-spots with highest correlation
    th = B(Len);
    
    Nr = round(Wid*1.5);
     
    Pk1=Pk;

    Pk1(Pk<th) = 0;   % remove points outside top 100 candidates    
%     Pk1 = findpeak1(Gn,Pk1,Nr); % modify the position by maximum finding technique
        
    Id = Pk1>0;    
    L = sum(sum(Id));
    P = zeros(L,5);
    k = 1;
    for i=1:M
        for j=1:N
            m1=i-Nr; m2=i+Nr;
            n1=j-Nr; n2=j+Nr;
            if m1>1&&m2<=M &&n1>1&&n2<=N && Pk1(i,j)>0
            
                zn=Img(m1:m2,n1:n2);
                [x,y] = meshgrid(n1:n2,m1:m2);
                Sig = Wid/2.358;
%                 p0 = guofitting(zn,x,y);                
%                 p1 = [p0 0];

                A1 = imresize(zn,size(zn)+1);            % estimate amplitude
%                 A1 = medfilt2(A1,[3 3]);
                A2 = max(A1(:));
                A3 = A2-bg;
                if A3<=0
                    A3 = max(zn(:));
                end
                
                p1 = [A3 j i Sig, bg];
                
%                 fy = guassfit2d(zn,x,y,p1);        
%                 p3 = [fy.A fy.a, fy.b fy.sig fy.c];
                
%                 p2 = gaussfit_ML(p1, x, y, zn, 100); % fit the best candidates to get accurate estimation
%                 p3 = p2;
                
                p3 = guassfit_LM(p1, x, y, zn, 100); %p3
                
                Nr1 = round(p3(4)*2.358*1.5);
                if Nr1>=1 && Nr1<min(M,N)
                    Nr = Nr1;
                end
                
                
                P(k,:) = p3; 
                k=k+1;
            end
        end        
    end
    Sigma = mean(P(:,4)); % estimate sigma and Bg by taking average
    Bg = mean(P(:,5));
              
    
end

function [Bg,FWHM]=EstimatPSF(Gn)
[M,N] = size(Gn);

 m = round((M+1)/2);
 n = round((N+1)/2);
 
 m1 = max(m-256+1,1); m2 = min(m+256,M);
 n1 = max(n-256+1,1); n2 = min(n+256,N);
 Gn = Gn(m1:m2,n1:n2);
 

% estimate background and sigma of PSF
% [Cout,Cent] = hist(Gn(:),max(Gn(:)));
% % bar(Cent,Cout)
% [~,Id] = max(Cout);
% bg = Cent(Id);
% for i=1:1
%     G = Gn-bg;
%     Id = G<0;
%     if sum(Id(:))>100
%         bg = bg + mean(G(Id));  % mean(G(Id))
%     end
% end
% G = Gn-bg;
% G(G<0)=0;
[Sigma,Bg] = FWHMestimat(Gn);
% Bg= Bg + bg;
FWHM = Sigma*2.3548;



function [Fn,X,Y] = LocalizeSpots(Gn)

[M,N,Nframe] = size(Gn);


tic

[Bg,FWHM]=EstimatPSF(Gn(:,:,1));
[PSF,OTF,W,Fw,c]=getPSF([M N], FWHM);
P = cell(Nframe,1);
parfor j = 1:Nframe
    
    G0 = Gn(:,:,j);
    %     I = imresize(I,2,'Method','lanczos2');   
   
    % localize all PSF
    G1 = G0-Bg; 
    G1(G1<0) = 0;  G1 = medfilt2(G1);
    
    % caculate correltion by cosine simularity
    G1 = imresize(imresize(G1,size(G1)+1),size(G1)); % lowpass filtering
    R = Correlate((G1),Fw,OTF,c);   % medfilt2 imagesc(R)
    [Pk,Peaks] = findpeak(R, FWHM*1.5,0.7);    
    Pk1 = Pk; 
    Nspot = sum(Pk1(:)>0);

    % caculate correltion by Pearson cross correlation
%     tic
    R2 = Correlate2((G1),W,Fw,PSF,OTF);  % imagesc(R2);
%     toc
%  R3 = R2; R3(R3<0.6)=0;      
%     PSF1 = PSF(250:263,250:263);
%     tic
%     R3 = normxcorr2(PSF1,(G1));  %imagesc(R3);
%     toc
%     Tplot({R2,R3},1,2);
    
%     idx = R>0.5 & R<=1;
%     R(~idx) = 0;
    Pk = findpeak(R2, FWHM*1.5,0.60^1);    
    Pk1 = Pk; 
    Nspot = sum(Pk1(:)>0);
%     Pk1 = findpeak1(G0,Pk,FWHM*1.5);
    % Gauss fitting
    P{j} = getPosition(G0,Pk1,FWHM,Bg);    
   
    fprintf(['Frames: ' num2str(j) ', Nspot:=' num2str(Nspot) '\n']);
%     imagesc(Pk1); axis image; drawnow;
    %
    subplot(121);
    imagesc(G0);axis image; axis off;colormap gray
    
    X1 = P{j}(:,2);
    Y1 = P{j}(:,3);
%     [Y1,X1] = find(Pk1);
    
%     hold on;
    subplot(122);
    sz = 1;
    scatter((X1+0.5),-(Y1+0.5),sz,'MarkerEdgeColor',[1 0 0],...
        'MarkerFaceColor',[0 0 1],...
        'LineWidth',2);

    axis image; axis off
%     hold off;
    drawnow;
end

Fn = []; X = []; Y = [];
for k = 1:length(P)
   PX = P{k}(:,2);
   PY = P{k}(:,3);
   X = [X; PX];
   Y = [Y; PY];
   Len = length(PX);
   Fn = [Fn; zeros(Len,1)+k];    
end

toc
;

% imwrite(mat2gray(ISM),'ISM1.png','BitDepth',16);

function Pk1 = findpeak1(Img,Pk,Nr) % not a good idea, very sensitive to noise
[M,N] = size(Img);
Pk1 = zeros(M,N);
Nr = round(Nr);
for i=1:M
    for j=1:N
        m1=i-Nr; m2=i+Nr;
        n1=j-Nr; n2=j+Nr;
        if m1>1&&m2<=M &&n1>1&&n2<=N && Pk(i,j)>0
            
            zn=Img(m1:m2,n1:n2);
            A1 = imresize(zn,2); % use bilinear interpolation to filter noise
            A1 = medfilt2(A1);
            [m,n,~] = maxp(A1);
            m = round(i + (m/2-Nr-1)); 
            n = round(j + (n/2-Nr-1));
            if m>0 && n>0 && m<=M && n<=N
                Pk1(m,n) = 1;  
            end
            
        end
    end
end


   

function [y,yy] = findpeak(xin, Np,th)
[m, n] = size(xin);
y = zeros(m,n);
y1 = y;
Nw = floor(2*Np); % search distance
Npad = Nw;
x = padarray(xin,[Npad Npad]);
% [M, N] = size(x);
for i = Npad+1:m+Npad
    for j = Npad+1:n+Npad        
        if(x(i,j)>th &&  x(i,j)>=x(i-1,j) && x(i,j)>=x(i+1,j) && x(i,j)>=x(i,j-1) && x(i,j)>=x(i,j+1) && x(i,j)>=x(i-1,j-1) && x(i,j)>=x(i+1,j-1) && x(i,j)>=x(i-1,j+1) && x(i,j)>=x(i+1,j+1))...
%                 && x(i-1,j)>0 && x(i+1,j)>0 && x(i,j-1)>0 && x(i,j+1)>0 && x(i-1,j-1)>0 && x(i+1,j-1)>0  && x(i+1,j-1)>0 && x(i+1,j+1)>0
            y(i-Npad,j-Npad) = x(i,j); 
%             continue;

            if i-Npad>0 && j-2-Npad>0
                y1(i-Npad,j-Npad) = 1;
            end
            if i+1-Npad>0 && j-Npad>0
                y1(i+1-Npad,j-Npad) = 1; 
            end
            if i-1-Npad>0 && j-Npad>0
                y1(i-1-Npad,j-Npad) = 1;
            end
            if i-Npad>0 &&j+1-Npad>0
                y1(i-Npad,j+1-Npad) = 1;
            end
            if i-Npad>0 && j-1-Npad>0
                y1(i-Npad,j-1-Npad) = 1;
            end
            if i+2-Npad>0 && j-Npad>0
                y1(i+2-Npad,j-Npad) = 1;     
            end
            if i-2-Npad>0 && j-Npad>0
                y1(i-2-Npad,j-Npad) = 1;
            end
            if i-Npad>0 && j+2-Npad>0
                y1(i-Npad,j+2-Npad) = 1;
            end
            if i-Npad>0 && j-2-Npad>0
                y1(i-Npad,j-2-Npad) = 1;
            end
%             W = x(i-Nw:i+Nw,j-Nw:j+Nw);
%             [~, I] = max(W(:));
%             [u,v] = ind2sub(size(W),I);
%             u1 = i+u-(Nw+1);
%             v1 = j+v-(Nw+1);
%             if u1-Npad> m || v1-Npad>n
%                continue; 
%             end
%             y(u1-Npad,v1-Npad) = 1;
        end
    
    end
end

if nargout>1
    yy = y1;
end

function fy =guassfit2d(zn,x,y,p0)

ft = fittype(@(A,a,b, sig,c,x1,y1) A*exp(-((x1-a).^2+(y1-b).^2)/(2*sig^2))+c,'independent', {'x1', 'y1'});
fy = fit([x(:),y(:)], zn(:), ft, 'StartPoint',p0); % ,'Algorithm', 'Levenberg-Marquardt'
%  [fy.A fy.a, fy.b fy.sig fy.c]  